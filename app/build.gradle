// Note: This only affects the code running the build, not the project.
// The project itself needs to declare its own repositories and dependencies.
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.14.0'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':private:speechutils:app')
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 606
        versionName '0.6.06'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE_ARVUTAJA"))
            keyAlias System.getenv("KEYSTORE_ARVUTAJA_ALIAS")
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile 'proguard.cfg'
            signingConfig signingConfigs.release
        }
    }
}


if (project.hasProperty('storePassword') &&
    project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = null
}

// Converts the SVG launcher icon to multiple resolution PNGs
task makeIcons << {
    def dir_res = 'res/'
    def dir_svg = '../images/'

    def launcher_fn_svg = 'ic_launcher.svg'
    def launcher_fn_png = 'ic_launcher.png'

    def sizeLogo = 512
    def sizeMap = [ 'mdpi': 48, 'hdpi': 72, 'xhdpi': 96, 'xxhdpi': 144, 'xxxhdpi': 192 ]

    def convertSvg = {
        size, dir_in, dir_out ->
            println "Converting launcher icon into ${dir_out} ..."
            def output1 = exec {
                commandLine 'mkdir', '-p', dir_out
            }
            def output2 = exec {
                commandLine 'rsvg-convert', '-f', 'png', '-w', size, '-h', size, '-o', dir_out + launcher_fn_png, dir_in + launcher_fn_svg
            }
    }

    convertSvg(sizeLogo, dir_svg, dir_svg)

    sizeMap.each {
        key, val -> convertSvg(val, dir_svg, dir_res + 'drawable-' + key + '/')
    }
}
